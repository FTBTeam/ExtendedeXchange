plugins {
	id "dev.architectury.loom" version "0.12.0-SNAPSHOT"
	id "maven-publish"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

def ENV = System.getenv()

// All jar files from this folder will be added automatically as runtime mod dependencies
String extraModsDir = "extra-mods-${project.minecraft_version}"

loom {
	silentMojangMappingsLicense()

	forge {
		mixinConfigs = [
//				"examplemod.mixins.json"
		]

		dataGen {
			mod project.mod_id
		}
	}

	launches {
		data {
			arg "--existing", file("src/main/resources").absolutePath
		}
	}
}

repositories {
	flatDir {
		name "extra-mods"
		dir file(extraModsDir)
	}
	maven {
		url "https://cursemaven.com"
	}
	maven {
		url 'https://dvs1.progwml6.com/files/maven'
	}
	maven { url = 'https://maven.parchmentmc.org' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

//	mappings loom.officialMojangMappings()
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-1.18.2:2022.09.04@zip")
	}
	forge "net.minecraftforge:forge:${project.forge_version}"

	modImplementation "curse.maven:projecte-226410:${project.projecte_file}"

	modCompileOnly "mezz.jei:jei-${minecraft_version}:${jei_version}:api"
	modRuntimeOnly "mezz.jei:jei-${minecraft_version}:${jei_version}"

	// Locally sourced extra mods for runtime (i.e. testing) - thanks AE2 for this idea
	for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
		def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
		def versionSep = basename.lastIndexOf('-')
		assert versionSep != -1
		def artifactId = basename.substring(0, versionSep)
		def version = basename.substring(versionSep + 1)
		modRuntimeOnly "extra-mods:$artifactId:$version"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.release = 17
}

java {
	withSourcesJar()
}


jar {
	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

if (ENV.CURSEFORGE_KEY) {
	curseforge {
		apiKey = ENV.CURSEFORGE_KEY
		project {
			id = project.curseforge_id
			releaseType = project.curseforge_type
			addGameVersion "Forge"
			addGameVersion = project.minecraft_version
			mainArtifact(remapJar.archivePath)
			relations {
				requiredDependency 'jei'
				optionalDependency 'projecte'
			}
			changelog = file("./CHANGELOG.md")
			changelogType = 'markdown'
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
		}
	}

	repositories {
		if (ENV.FTB_MAVEN_TOKEN) {
			maven {
				url "https://maven.ftb.dev/release"
				credentials {
					username = "ftb"
					password = "${ENV.FTB_MAVEN_TOKEN}"
				}
			}
		}

		if (ENV.SAPS_TOKEN) {
			maven {
				url "https://maven.saps.dev/minecraft"
				credentials {
					username = "ftb"
					password = "${ENV.SAPS_TOKEN}"
				}
			}
		}
	}
}
